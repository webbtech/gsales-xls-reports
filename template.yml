AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  xls-reports

  Gales Sales XLS Reports Service

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5

Parameters:
  ParamBillTo:
    Description: Required. Value of Tag key BillTo
    Type: String
  ParamCertificateArn:
    Description: Domain Certificate Arn
    Type: String
  ParamCustomDomainName:
    Description: Custom Domain Name
    Type: String
  ParamHostedZoneId:
    Description: Hosted Zone ID
    Type: String
  ParamReportBucket:
    Description: Bucket for report files
    Type: String
  ParamKMSKeyId:
    Description: KMS key id
    Type: String
  ParamSSMPath:
    Description: SSM Params path
    Type: String
  CognitoUserPoolName:
    Type: String
    Default: MyTestPool
  CognitoUserPoolClientName:
    Type: String
    Default: MyTestPoolClient
  # ParamSecurityGroupIds:
  #   Description: SecurityGroupIds
  #   ConstraintDescription: 'must be list of EC2 security group ids'
  #   Type: 'List<AWS::EC2::SecurityGroup::Id>'
  # ParamSubnetIds:
  #   Description: SecurityGroupIds
  #   ConstraintDescription: 'must be list of EC2 subnet ids'
  #   Type: 'List<AWS::EC2::Subnet::Id>'

Resources:
  RestApi:
    Type: AWS::Serverless::Api
    DeletionPolicy: Delete
    DependsOn: ReportsFunction
    Properties:
      StageName: Prod
      EndpointConfiguration: 
        Type: REGIONAL
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: arn:aws:cognito-idp:ca-central-1:407205661819:userpool/ca-central-1_lolwfYIAr
            # UserPoolArn: !GetAtt MyCognitoUserPool.Arn
            # Identity:
              # Header: Authorization

        # DefaultAuthorizer: LambdaTokenAuthorizer
        # Authorizers:
        #   LambdaTokenAuthorizer:
        #     FunctionArn: !GetAtt AuthLambda.Arn
        #     Identity:
        #       ReauthorizeEvery: 300
              # ReauthorizeEvery: 1 # for testing purposes

      # Documentation for below: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#gateway-response-object
      # Oddly, this property does not work with sam local
      # GatewayResponses:
      #   UNAUTHORIZED:
      #     StatusCode: "401"
      #     ResponseTemplates:
      #       "application/json": '{ "message": $context.error.messageString }'
      #     ResponseParameters:
      #       Headers:
      #         Access-Control-Expose-Headers: "'WWW-Authenticate'"
      #         Access-Control-Allow-Origin: "'*'"
      #         Access-Control-Allow-Headers: "'*'"

      # Docs for this at: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#gateway-response-object
      # Domain:
      #   DomainName: !Ref ParamCustomDomainName
      #   CertificateArn: !Ref ParamCertificateArn
      #   EndpointConfiguration: "REGIONAL"
      #   Route53:
      #     HostedZoneId: !Ref ParamHostedZoneId
      #     EvaluateTargetHealth: true
      #     DistributionDomainName:
      #       Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  ReportsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: report
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Role: !GetAtt ReportsRole.Arn
      Timeout: 20
      MemorySize: 1028
      Environment:
        Variables:
          Stage: prod
      VpcConfig:
        # SecurityGroupIds: !Ref ParamSecurityGroupIds
        # SubnetIds: !Ref ParamSubnetIds
        SecurityGroupIds:
          - sg-0ef2b0c1027e7c4af
          - sg-0dfa356e283807b5c
        SubnetIds:
          - subnet-049d3b3c41f948eab
          - subnet-05e3c14490b96f34c
          - subnet-0dbfe2dec1f2c716a
      Tags:
        BillTo: !Ref ParamBillTo
      Events:
        Ping:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref RestApi
            # Auth:
              # Authorizer: NONE
        Report:
          Type: Api
          Properties:
            Path: /report
            Method: POST
            RestApiId: !Ref RestApi
            Auth:
              Authorizer: MyCognitoAuthorizer
              # Authorizer: NONE
        # Options:
        #   Type: Api
        #   Properties:
        #     Path: /report
        #     Method: OPTIONS
        #     RestApiId: !Ref RestApi
        #     Auth:
        #       Authorizer: NONE

  ReportsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: FunctionParameterAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParametersByPath
            Resource:
              Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParamSSMPath}
      - PolicyName: FunctionKMS
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - kms:Decrypt
            - kms:DescribeKey
            Resource:
              Fn::Sub: arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${ParamKMSKeyId}
      - PolicyName: FunctionLogAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: FunctionXRayAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
            Resource: '*'
      - PolicyName: FunctionS3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource: 
              Fn::Sub: arn:aws:s3:::${ParamReportBucket}/*
      - PolicyName: FunctionVPCAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeNetworkInterfaces
            Resource: '*'

  # MyCognitoUserPool:
  #   Type: AWS::Cognito::UserPool
  #   Properties:
  #     UserPoolName: !Ref CognitoUserPoolName
  #     Policies:
  #       PasswordPolicy:
  #         MinimumLength: 8
  #     UsernameAttributes:
  #       - email
  #     Schema:
  #       - AttributeDataType: String
  #         Name: email
  #         Required: false
  
  # MyCognitoUserPoolClient:
  #   Type: AWS::Cognito::UserPoolClient
  #   Properties:
  #     UserPoolId: !Ref MyCognitoUserPool
  #     ClientName: !Ref CognitoUserPoolClientName
  #     GenerateSecret: false
  #     # in order to add the ALLOW_USER_PASSWORD_AUTH auth flow, we need to add the ALLOW_REFRESH_TOKEN_AUTH flow,
  #     # the ALLOW_USER_SRP_AUTH and ALLOW_CUSTOM_AUTH are there by default so I included them
  #     ExplicitAuthFlows:
  #       - ALLOW_REFRESH_TOKEN_AUTH # this is required and must be here
  #       - ALLOW_USER_PASSWORD_AUTH
  #       - ALLOW_USER_SRP_AUTH
  #       - ALLOW_CUSTOM_AUTH
  
Outputs:
  ApiId:
    Description: API ID
    Value:
      Ref: RestApi
  ApiEndpoint:
    Description: "API Prod stage endpoint"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  ApiArn:
    Description: "API ARN"
    Value: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/"
  ApiFQDN:
    Description: "API Domain Name"
    Value: !Ref ParamCustomDomainName
  ApiURL:
    Description: "API Url"
    Value: !Sub "https://${ParamCustomDomainName}/report"
  ReportsFunctionArn:
    Description: "ReportsFunction ARN"
    Value: !GetAtt ReportsFunction.Arn
  ReportsRoleArn:
    Description: "Reports Role ARN"
    Value: !GetAtt ReportsRole.Arn